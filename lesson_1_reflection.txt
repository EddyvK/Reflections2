How did viewing a diff between two versions of a file help you see the bug that was introduced?

Using the diff meant that only a few lines needed to be inspected for
differences, rather than the full size of the text.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It might help understand what typical kind of errors I make and how I go about
solving them.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Automatic saves spare you from forgetting to save and then loosing a ton of work when the system goes. Saving yourself and being disciplined about it means that you always have a working version.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
It depends on the character of the files. Where changes in one file (might) necessitate changes in another, one change n content will show up over several files.

How can you use the commands git log and git diff to view the history of files?

With git log you can see which files were changed when and - assuming meaningful commit messages - what changes occurred between the versions. With git diff, those exact changes can be found on a code level.

How might using version control make you more confident to make changes that could break something?

It is easier to take a risk with the code when you know that you can always return to an older, working, version of the code.

Now that you have your workspace set up, what do you want to try using Git for?
Version control on larger projects
